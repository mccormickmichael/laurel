---
AWSTemplateFormatVersion: '2010-09-09'

# Metadata:
#   template metadata
# Mappings:
#   set of mappings
# Conditions:
# set of conditions
# Transform:
#   set of transforms

Parameters:
  CidrBlockPrefix:
    Type: String
    Description: 'First two octets of the cidr block to reserve for the VPC. (e.g. 172.16 or 10.100)'

Description: 'VPC with one Public and 3 Private subnets.'

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Join [ '.', [ !Ref CidrBlockPrefix, '0.0/16' ] ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: !Ref 'AWS::StackName'

  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Ref 'AWS::StackName'

  IGWAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

#### Public Route Table
      
  PublicRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'Public' ] ]

  PublicRouteAll:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref PublicRT
      GatewayId: !Ref IGW

  #### Public Subnet

  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-west-2c'
      CidrBlock: !Join [ '.', [ !Ref CidrBlockPrefix, '0.0/19'] ]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'PublicC' ] ]

  PublicSubnetCRTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnetC

  PublicNacl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'Public' ] ]

  PublicNaclRuleEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      CidrBlock: '0.0.0.0/0'
      Egress: true
      RuleAction: 'allow'
      Protocol: -1

  PublicNaclRuleHttpsIn:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 101
      CidrBlock: '0.0.0.0/0'
      Egress: false
      RuleAction: 'allow'
      Protocol: 6
      PortRange:
        From: 443
        To: 443

  PublicNaclRuleOpenVpnIn:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 102
      CidrBlock: '0.0.0.0/0'
      Egress: false
      RuleAction: 'allow'
      Protocol: 6
      PortRange:
        From: 943
        To: 943

  PublicNaclRuleSSHIn:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 103
      CidrBlock: '0.0.0.0/0'
      Egress: false
      RuleAction: 'allow'
      Protocol: 6
      PortRange:
        From: 22
        To: 22

  PublicNaclRuleEphemeralIn:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 150
      CidrBlock: '0.0.0.0/0'
      Egress: false
      RuleAction: 'allow'
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
        
  PublicNaclRuleInternalUDP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 200
      CidrBlock: !GetAtt VPC.CidrBlock
      Egress: false
      RuleAction: 'allow'
      Protocol: 17
      PortRange:
        From: 1024
        To: 65535

  PublicNaclRuleInternalTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 250
      CidrBlock: !GetAtt VPC.CidrBlock
      Egress: false
      RuleAction: 'allow'
      Protocol: 6
      PortRange:
        From: 0
        To: 65535

  PublicSubnetCNaclAssoc:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetC
      NetworkAclId: !Ref PublicNacl

  #### Private Subnet NAcl

  PrivateNacl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'Private' ] ]

  PrivateNaclRuleEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      CidrBlock: '0.0.0.0/0'
      Egress: true
      RuleAction: 'allow'
      Protocol: -1

  PrivateNaclRuleEphemeralIn:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 150
      CidrBlock: '0.0.0.0/0'
      Egress: false
      RuleAction: 'allow'
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
        
  PrivateNaclRuleInternalUDP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 200
      CidrBlock: !GetAtt VPC.CidrBlock
      Egress: false
      RuleAction: 'allow'
      Protocol: 17
      PortRange:
        From: 0
        To: 65535

  PrivateNaclRuleInternalTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 250
      CidrBlock: !GetAtt VPC.CidrBlock
      Egress: false
      RuleAction: 'allow'
      Protocol: 6
      PortRange:
        From: 0
        To: 65535
      
  #### Private Subnet A

  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-west-2c'
      CidrBlock: !Join [ '.', [ !Ref CidrBlockPrefix, '128.0/19' ] ]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'PrivateA' ] ]

  PrivateSubnetARTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetANaclAssoc:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNacl

  #### Private Subnet B

  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-west-2c'
      CidrBlock: !Join [ '.', [ !Ref CidrBlockPrefix, '160.0/19' ] ]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'PrivateB' ] ]

  PrivateSubnetBRTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetBNaclAssoc:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref PrivateNacl

  #### Private Subnet C

  PrivateSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-west-2c'
      CidrBlock: !Join [ '.', [ !Ref CidrBlockPrefix, '192.0/19' ] ]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'PrivateC' ] ]

  PrivateSubnetCRTAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnetC

  PrivateSubnetCNaclAssoc:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetC
      NetworkAclId: !Ref PrivateNacl

  #### Private Route Table

  PrivateRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'Private' ] ]

  # Depend on the NAT instance to create the 0.0.0.0/0 route

  #### NAT instance for private subnet routing

  NatInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service: [ 'ec2.amazonaws.com' ]
            Action: [ 'sts:AssumeRole' ]
      Path: '/'
      Policies:
        -
          PolicyName: !Join [ '', [ !Ref 'AWS::StackName', 'NAT' ] ]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: 'Allow'
              Resource: [ 'arn:aws:ec2:*' ]
              Action: [ 'ec2:CreateRoute', 'ec2:DeleteRoute' ]
      

  NatInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join [ '', [ !Ref 'AWS::StackName', 'NAT'  ] ]
      Roles: [ !Ref NatInstanceRole ]

  NatInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: 'us-west-2c'
      SubnetId: !Ref PublicSubnetC
      ImageId: 'ami-8bfce8f2'
      IamInstanceProfile: !Ref NatInstanceProfile
      InstanceInitiatedShutdownBehavior: 'stop'
      InstanceType: 't2.micro'
      # KeyName: 'bastion'
      SecurityGroupIds: [ !Ref NatInstanceSG ]
      SourceDestCheck: false
      UserData:
        "Fn::Base64":
          "Fn::Sub": |
            #!/bin/bash
            yum update -y -y && yum install -y yum-cron && chkconfig yum-cron on
            INS_ID=`curl http://169.254.169.254/latest/meta-data/instance-id`
            aws ec2 delete-route --destination-cidr-block 0.0.0.0/0 --route-table-id ${PrivateRT} --region us-west-2
            aws ec2 create-route --destination-cidr-block 0.0.0.0/0 --route-table-id ${PrivateRT} --instance-id $INS_ID --region us-west-2
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'Nat' ] ]
            

  NatInstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'NAT Instance SG'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !GetAtt VPC.CidrBlock
          IpProtocol: '-1'
        # - CidrIp: '0.0.0.0/0'
        #   IpProtocol: 'tcp'
        #   FromPort: 22
        #   ToPort: 22
      Tags:
        - Key: 'Name'
          Value: !Join [ '', [!Ref 'AWS::StackName', 'Nat' ] ]

Outputs:
  VpcId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'VPC'] ]
  VpcCidrBlock:
    Description: 'VPC CidrBlock'
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'CidrBlock'] ]
  PublicSubnetC:
    Description: 'ID of the public subnet'
    Value: !Ref PublicSubnetC
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicSubnetC'] ]
  PrivateSubnetA:
    Description: 'ID of the private subnet A'
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PrivateSubnetA'] ]
  PrivateSubnetB:
    Description: 'ID of the private subnet A'
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PrivateSubnetB'] ]
  PrivateSubnetC:
    Description: 'ID of the private subnet A'
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PrivateSubnetC'] ]
  NatInstanceId:
    Description: "ID of the VPC's NAT instance"
    Value: !Ref NatInstance
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'NatInstance'] ]
