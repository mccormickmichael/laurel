---
AWSTemplateFormatVersion: '2010-09-09'

Description: 'Consul server cluster'

Parameters:
  VPCStack:
    Type: 'String'
    Description: 'The easy_vpc stack that contains the VPC into which the server cluster will be built'

  Image:
    Type: 'String'
    Description: 'The image ID to use for server instances'

Resources:

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-Consul'
      RetentionInDays: 3

  ServerInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: [ 'ec2.amazonaws.com' ]
            Action: [ 'sts:AssumeRole' ]
      Path: '/'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-Server'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: 'Allow'
              Resource: [ 'arn:aws:logs:*' ]
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
    

  ServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-Server'
      Roles: [ !Ref ServerInstanceRole ]

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-SSH'
      GroupDescription: 'SSH accces to consul servers'
      VpcId:
        'Fn::ImportValue':
          !Sub '${VPCStack}-VPC'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'  # TODO: restrict to VPC or VPN block
          IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-SSH'

  ServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-Server'
      GroupDescription: 'Communication with consul server instances'
      VpcId:
        'Fn::ImportValue':
          !Sub '${VPCStack}-VPC'
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Server'

  AgentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-Agent'
      GroupDescription: 'Communication from Consul agents to the server cluster'
      VpcId:
        'Fn::ImportValue':
          !Sub '${VPCStack}-VPC'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'  # TODO: refine?
          FromPort: 8500
          ToPort: 8500
          IpProtocol: 'tcp'
          
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Agent'

  ServerSGIngressAgentRPC:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ServerSecurityGroup
      SourceSecurityGroupId: !Ref AgentSecurityGroup
      IpProtocol: 'tcp'
      FromPort: 8300
      ToPort: 8300

  ServerSGIngressSerfTCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ServerSecurityGroup
      SourceSecurityGroupId: !Ref ServerSecurityGroup
      IpProtocol: 'tcp'
      FromPort: 8301
      ToPort: 8302
      
  ServerSGIngressSerfUDP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ServerSecurityGroup
      SourceSecurityGroupId: !Ref ServerSecurityGroup
      IpProtocol: 'udp'
      FromPort: 8301
      ToPort: 8302

  Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref Image
      IamInstanceProfile: !Ref ServerInstanceProfile
      InstanceInitiatedShutdownBehavior: 'stop'
      InstanceType: 't2.micro'
      KeyName: 'infradev'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Eni1
          DeviceIndex: 0
      UserData:
        'Fn::Base64':
          'Fn::Sub': |
            #!/bin/bash
            yum update -y && yum install -y yum-cron && chkconfig yum-cron on
            /opt/aws/bin/cfn-init --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance1 --configsets server --verbose
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-1'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          server: [ 'cloudwatchlogs', 'consul' ]
        consul:
          # assume we have built an AMI with consul and consul service installed. We just need to create the config file and start the service
          files:
            # TODO: change bootstrap_expect to 3 when clustered
            '/opt/consul/config/config.json':
              content:
                'Fn::Sub': |
                  {
                  "datacenter": "${AWS::Region}",
                  "data_dir": "/var/lib/consul",
                  "log_level": "INFO",
                  "server": true,
                  "bootstrap_expect": 1,
                  "bind_addr": "${Eni1.PrimaryPrivateIpAddress}",
                  "retry_join": [ "${Eni1.PrimaryPrivateIpAddress}" ]
                  }
              mode: '000644'
              owner: 'root'  # TODO: move to consul user?
              group: 'root'
              encoding: 'plain'
          commands:
            '90_clean_backups':
              command: 'find . -type f -name *.bak -delete'
              cwd: '/opt/consul/config'
          services:
            sysvinit:
              consul:
                enabled: true
                ensureRunning: true
                files: '/opt/consul/config/config.json'
        cloudwatchlogs:
          files:
            '/tmp/awslogs-agent-setup.py':
              source: 'https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py'
              mode: '000755'
              owner: 'root'
              group: 'root'
            '/tmp/cwlogs.cfg':
              content:
                'Fn::Sub': |
                  [general]
                  state_file = /var/awslogs/agent-state

                  [consul_agent]
                  file = /var/log/consul
                  datetime_format = %b %d %H:%M:%S
                  log_group_name = ${LogGroup}
                  log_stream_name = consul_server_1
              mode: '000644'
              owner: 'root'
              group: 'root'
          commands:
            '50_cwlogs':
              command:
                'Fn::Sub': |
                  python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs.cfg

  Eni1:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: !Sub '${AWS::StackName}-1'
      GroupSet: [ !Ref ServerSecurityGroup, !Ref AgentSecurityGroup, !Ref SSHSecurityGroup ]
      SubnetId:
        'Fn::ImportValue':
          !Sub '${VPCStack}-PrivateSubnetA'
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-1'

  # 3 instances
  # 3 enis

Outputs:
  AgentSecurityGroup:
    Description: 'Security Group for Consul Agents'
    Value: !Ref AgentSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-AgentSG'

  Server1Address:
    Description: 'IP Address for Server 1'
    Value: !GetAtt Eni1.PrimaryPrivateIpAddress
    Export:
      Name: !Sub '${AWS::StackName}-Server1'

